{"ast":null,"code":"import { gql } from \"@apollo/client\";\nexport const CREATE_USER = gql`\n  mutation CreateUser($createInput: CreateInput!) {\n    createUser(createInput: $createInput) {\n      ... on Success {\n        message\n        token\n      }\n      ... on Failure {\n        message\n        args\n      }\n    }\n  }\n`;\nexport const LOGIN_USER = gql`\n  mutation LoginUser($loginInput: LoginInput!) {\n    loginUser(loginInput: $loginInput) {\n      ... on Success {\n        message\n        token\n      }\n      ... on Failure {\n        message\n        args\n      }\n    }\n  }\n`;\nexport const GEN_OTP = gql`\n  mutation GETOTP($mobilenumber: String!) {\n    genOtp(mobilenumber: $mobilenumber) {\n      ... on ResFailure {\n        message\n        args\n      }\n\n      ... on ResSuccess {\n        message\n        otp\n      }\n    }\n  }\n`;\nexport const UPDATE_PASSWORD = gql`\n  mutation UpdatedUser($mobilenumber: String!, $password: String!) {\n    updateUser(mobilenumber: $mobilenumber, password: $password) {\n      ... on SingleSuccess {\n        message\n        user {\n          _id\n        }\n      }\n\n      ... on SingleFailure {\n        message\n        args\n      }\n    }\n  }\n`;\nexport const GET_IMAGE_USER = gql`\n  mutation SingleUser($userId: ID!) {\n    getSingleUser(_id: $userId) {\n      ... on SingleSuccess {\n        message\n        user {\n          avatarImage\n          name\n        }\n      }\n\n      ... on SingleFailure {\n        message\n        args\n      }\n    }\n  }\n`;\nexport const ALL_USER = gql`\n  query GetAllUser {\n    getAllUser {\n      _id\n      name\n      avatarImage\n      createdAt\n    }\n  }\n`;\nexport const GET_SINGLE_USER = gql`\n  mutation SingleUser($userId: ID!) {\n    getSingleUser(_id: $userId) {\n      ... on SingleSuccess {\n        message\n        user {\n          avatarImage\n          name\n          createdAt\n          question {\n            _id\n            title\n            createdAt\n            upvote {\n              _id\n            }\n            downvote {\n              _id\n            }\n          }\n          answer {\n            _id\n            upvote {\n              _id\n            }\n            downvote {\n              _id\n            }\n            body\n            createdAt\n          }\n          bookmarkedQuestion {\n            _id\n            title\n            createdAt\n            upvote {\n              _id\n            }\n            downvote {\n              _id\n            }\n          }\n          bookmarkedAnswer {\n            _id\n            upvote {\n              _id\n            }\n            downvote {\n              _id\n            }\n            body\n            createdAt\n          }\n        }\n      }\n\n      ... on SingleFailure {\n        message\n        args\n      }\n    }\n  }\n`;","map":{"version":3,"names":["gql","CREATE_USER","LOGIN_USER","GEN_OTP","UPDATE_PASSWORD","GET_IMAGE_USER","ALL_USER","GET_SINGLE_USER"],"sources":["/Users/vanshamaggarwal/Documents/GitHub/QueryOverflow/frontend/src/graphql/user.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const CREATE_USER = gql`\n  mutation CreateUser($createInput: CreateInput!) {\n    createUser(createInput: $createInput) {\n      ... on Success {\n        message\n        token\n      }\n      ... on Failure {\n        message\n        args\n      }\n    }\n  }\n`;\n\nexport const LOGIN_USER = gql`\n  mutation LoginUser($loginInput: LoginInput!) {\n    loginUser(loginInput: $loginInput) {\n      ... on Success {\n        message\n        token\n      }\n      ... on Failure {\n        message\n        args\n      }\n    }\n  }\n`;\n\nexport const GEN_OTP = gql`\n  mutation GETOTP($mobilenumber: String!) {\n    genOtp(mobilenumber: $mobilenumber) {\n      ... on ResFailure {\n        message\n        args\n      }\n\n      ... on ResSuccess {\n        message\n        otp\n      }\n    }\n  }\n`;\n\nexport const UPDATE_PASSWORD = gql`\n  mutation UpdatedUser($mobilenumber: String!, $password: String!) {\n    updateUser(mobilenumber: $mobilenumber, password: $password) {\n      ... on SingleSuccess {\n        message\n        user {\n          _id\n        }\n      }\n\n      ... on SingleFailure {\n        message\n        args\n      }\n    }\n  }\n`;\n\nexport const GET_IMAGE_USER = gql`\n  mutation SingleUser($userId: ID!) {\n    getSingleUser(_id: $userId) {\n      ... on SingleSuccess {\n        message\n        user {\n          avatarImage\n          name\n        }\n      }\n\n      ... on SingleFailure {\n        message\n        args\n      }\n    }\n  }\n`;\n\nexport const ALL_USER = gql`\n  query GetAllUser {\n    getAllUser {\n      _id\n      name\n      avatarImage\n      createdAt\n    }\n  }\n`;\n\nexport const GET_SINGLE_USER = gql`\n  mutation SingleUser($userId: ID!) {\n    getSingleUser(_id: $userId) {\n      ... on SingleSuccess {\n        message\n        user {\n          avatarImage\n          name\n          createdAt\n          question {\n            _id\n            title\n            createdAt\n            upvote {\n              _id\n            }\n            downvote {\n              _id\n            }\n          }\n          answer {\n            _id\n            upvote {\n              _id\n            }\n            downvote {\n              _id\n            }\n            body\n            createdAt\n          }\n          bookmarkedQuestion {\n            _id\n            title\n            createdAt\n            upvote {\n              _id\n            }\n            downvote {\n              _id\n            }\n          }\n          bookmarkedAnswer {\n            _id\n            upvote {\n              _id\n            }\n            downvote {\n              _id\n            }\n            body\n            createdAt\n          }\n        }\n      }\n\n      ... on SingleFailure {\n        message\n        args\n      }\n    }\n  }\n`;\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,OAAO,MAAMC,WAAW,GAAGD,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAME,UAAU,GAAGF,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMG,OAAO,GAAGH,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMI,eAAe,GAAGJ,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMK,cAAc,GAAGL,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMM,QAAQ,GAAGN,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMO,eAAe,GAAGP,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}