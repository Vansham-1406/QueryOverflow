{"ast":null,"code":"import { gql } from \"@apollo/client\";\nexport const CREATE_QUESTION = gql`\n  mutation CreateQuestion($inputQuestion: CreateQuestion) {\n    createQuestion(inputQuestion: $inputQuestion) {\n      ... on QuestionSuccess {\n        message\n        question {\n          userId {\n            name\n            avatarImage\n            question {\n              title\n              tags {\n                TagName\n              }\n            }\n          }\n          chatGptAnswer\n          answers {\n            _id\n          }\n          tags {\n            _id\n          }\n        }\n      }\n      ... on QuestionFailure {\n        message\n        args\n      }\n    }\n  }\n`;\nexport const GET_ALL_QUESTION = gql`\n  query GetAllQuestion {\n    getAllQuestion {\n      _id\n      createdAt\n      title\n      body\n      userId {\n        name\n        avatarImage\n      }\n      answers {\n        _id\n      }\n      tags {\n        _id\n        TagName\n      }\n      upvote {\n        _id\n      }\n      downvote {\n        _id\n      }\n      view {\n        _id\n      }\n    }\n  }\n`;\nexport const GET_SINGLE_QUESTION = gql`\n  mutation GetSingleQuestion($question: ID!) {\n    getSingleQuestion(questionId: $question) {\n      ... on QuestionSuccess {\n        message\n        question {\n          title\n          body\n          code\n          image\n          tags {\n            TagName\n          }\n          upvote {\n            _id\n          }\n          downvote {\n            _id\n          }\n          view {\n            _id\n          }\n          userId {\n            name\n            avatarImage\n          }\n          chatGptOpt\n          chatGptAnswer\n          answers {\n            _id\n            body\n            code\n            image\n            userId {\n              name\n              avatarImage\n            }\n            upvote {\n              _id\n            }\n            downvote {\n              _id\n            }\n          }\n        }\n      }\n      ... on QuestionFailure {\n        message\n        args\n      }\n    }\n  }\n`;","map":{"version":3,"names":["gql","CREATE_QUESTION","GET_ALL_QUESTION","GET_SINGLE_QUESTION"],"sources":["/Users/vanshamaggarwal/Documents/GitHub/QueryOverflow/frontend/src/graphql/question.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const CREATE_QUESTION = gql`\n  mutation CreateQuestion($inputQuestion: CreateQuestion) {\n    createQuestion(inputQuestion: $inputQuestion) {\n      ... on QuestionSuccess {\n        message\n        question {\n          userId {\n            name\n            avatarImage\n            question {\n              title\n              tags {\n                TagName\n              }\n            }\n          }\n          chatGptAnswer\n          answers {\n            _id\n          }\n          tags {\n            _id\n          }\n        }\n      }\n      ... on QuestionFailure {\n        message\n        args\n      }\n    }\n  }\n`;\n\nexport const GET_ALL_QUESTION = gql`\n  query GetAllQuestion {\n    getAllQuestion {\n      _id\n      createdAt\n      title\n      body\n      userId {\n        name\n        avatarImage\n      }\n      answers {\n        _id\n      }\n      tags {\n        _id\n        TagName\n      }\n      upvote {\n        _id\n      }\n      downvote {\n        _id\n      }\n      view {\n        _id\n      }\n    }\n  }\n`;\n\nexport const GET_SINGLE_QUESTION = gql`\n  mutation GetSingleQuestion($question: ID!) {\n    getSingleQuestion(questionId: $question) {\n      ... on QuestionSuccess {\n        message\n        question {\n          title\n          body\n          code\n          image\n          tags {\n            TagName\n          }\n          upvote {\n            _id\n          }\n          downvote {\n            _id\n          }\n          view {\n            _id\n          }\n          userId {\n            name\n            avatarImage\n          }\n          chatGptOpt\n          chatGptAnswer\n          answers {\n            _id\n            body\n            code\n            image\n            userId {\n              name\n              avatarImage\n            }\n            upvote {\n              _id\n            }\n            downvote {\n              _id\n            }\n          }\n        }\n      }\n      ... on QuestionFailure {\n        message\n        args\n      }\n    }\n  }\n`;\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,OAAO,MAAMC,eAAe,GAAGD,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAGF,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMG,mBAAmB,GAAGH,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}