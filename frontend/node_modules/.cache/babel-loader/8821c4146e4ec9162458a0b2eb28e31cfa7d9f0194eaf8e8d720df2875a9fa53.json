{"ast":null,"code":"import { gql } from \"@apollo/client\";\nexport const CREATE_QUESTION = gql`\n  mutation CreateQuestion($inputQuestion: CreateQuestion) {\n    createQuestion(inputQuestion: $inputQuestion) {\n      ... on QuestionSuccess {\n        message\n        question {\n          title\n          createdAt\n          _id\n          body\n          code\n          image\n          tags {\n            TagName\n          }\n          upvote {\n            _id\n          }\n          downvote {\n            _id\n          }\n          view {\n            _id\n          }\n          userId {\n            name\n            avatarImage\n          }\n          chatGptOpt\n          chatGptAnswer\n          answers {\n            _id\n            createdAt\n            body\n            code\n            image\n            userId {\n              name\n              avatarImage\n            }\n            upvote {\n              _id\n            }\n            downvote {\n              _id\n            }\n          }\n        }\n      }\n      ... on QuestionFailure {\n        message\n        args\n      }\n    }\n  }\n`;\nexport const GET_ALL_QUESTION = gql`\n  query GetAllQuestion {\n    getAllQuestion {\n      _id\n      createdAt\n      title\n      body\n      userId {\n        name\n        avatarImage\n        _id\n      }\n      answers {\n        _id\n      }\n      tags {\n        _id\n        TagName\n      }\n      upvote {\n        _id\n      }\n      downvote {\n        _id\n      }\n      view {\n        _id\n      }\n    }\n  }\n`;\nexport const GET_SINGLE_QUESTION = gql`\n  mutation GetSingleQuestion($question: ID!) {\n    getSingleQuestion(questionId: $question) {\n      ... on QuestionSuccess {\n        message\n        question {\n          title\n          createdAt\n          body\n          code\n          image\n          tags {\n            TagName\n          }\n          upvote {\n            _id\n          }\n          downvote {\n            _id\n          }\n          view {\n            _id\n          }\n          userId {\n            name\n            avatarImage\n          }\n          chatGptOpt\n          chatGptAnswer\n          answers {\n            _id\n            createdAt\n            body\n            code\n            image\n            userId {\n              name\n              avatarImage\n            }\n            upvote {\n              _id\n            }\n            downvote {\n              _id\n            }\n          }\n        }\n      }\n      ... on QuestionFailure {\n        message\n        args\n      }\n    }\n  }\n`;\nexport const UpvoteQuestion = gql`\n  mutation UpvoteQuestion(\n    $upvoteQuestionQuestionId2: ID!\n    $upvoteQuestionUserId2: ID!\n  ) {\n    upvoteQuestion(\n      questionId: $upvoteQuestionQuestionId2\n      userId: $upvoteQuestionUserId2\n    )\n  }\n`;\nexport const DownvoteQuestion = gql`\n  mutation DownvoteQuestion($questionId: ID!, $userId: ID!) {\n    downvoteQuestion(questionId: $questionId, userId: $userId)\n  }\n`;\nexport const isUpVote = gql`\n  mutation Isupvote($isupvoteQuestionId2: ID!, $isupvoteUserId2: ID!) {\n    isupvote(questionId: $isupvoteQuestionId2, userId: $isupvoteUserId2)\n  }\n`;\nexport const isDownVote = gql`\n  mutation Isdownvote($isdownvoteQuestionId2: ID!, $isdownvoteUserId2: ID!) {\n    isdownvote(questionId: $isdownvoteQuestionId2, userId: $isdownvoteUserId2)\n  }\n`;\nexport const bookmarkQuestion = gql`\n  mutation UpdateBookmarkedQuestion(\n    $updateBookmarkedQuestionQuestionId2: ID!\n    $updateBookmarkedQuestionUserId2: ID!\n  ) {\n    updateBookmarkedQuestion(\n      questionId: $updateBookmarkedQuestionQuestionId2\n      userId: $updateBookmarkedQuestionUserId2\n    )\n  }\n`;","map":{"version":3,"names":["gql","CREATE_QUESTION","GET_ALL_QUESTION","GET_SINGLE_QUESTION","UpvoteQuestion","DownvoteQuestion","isUpVote","isDownVote","bookmarkQuestion"],"sources":["/Users/vanshamaggarwal/Documents/GitHub/QueryOverflow/frontend/src/graphql/question.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const CREATE_QUESTION = gql`\n  mutation CreateQuestion($inputQuestion: CreateQuestion) {\n    createQuestion(inputQuestion: $inputQuestion) {\n      ... on QuestionSuccess {\n        message\n        question {\n          title\n          createdAt\n          _id\n          body\n          code\n          image\n          tags {\n            TagName\n          }\n          upvote {\n            _id\n          }\n          downvote {\n            _id\n          }\n          view {\n            _id\n          }\n          userId {\n            name\n            avatarImage\n          }\n          chatGptOpt\n          chatGptAnswer\n          answers {\n            _id\n            createdAt\n            body\n            code\n            image\n            userId {\n              name\n              avatarImage\n            }\n            upvote {\n              _id\n            }\n            downvote {\n              _id\n            }\n          }\n        }\n      }\n      ... on QuestionFailure {\n        message\n        args\n      }\n    }\n  }\n`;\n\nexport const GET_ALL_QUESTION = gql`\n  query GetAllQuestion {\n    getAllQuestion {\n      _id\n      createdAt\n      title\n      body\n      userId {\n        name\n        avatarImage\n        _id\n      }\n      answers {\n        _id\n      }\n      tags {\n        _id\n        TagName\n      }\n      upvote {\n        _id\n      }\n      downvote {\n        _id\n      }\n      view {\n        _id\n      }\n    }\n  }\n`;\n\nexport const GET_SINGLE_QUESTION = gql`\n  mutation GetSingleQuestion($question: ID!) {\n    getSingleQuestion(questionId: $question) {\n      ... on QuestionSuccess {\n        message\n        question {\n          title\n          createdAt\n          body\n          code\n          image\n          tags {\n            TagName\n          }\n          upvote {\n            _id\n          }\n          downvote {\n            _id\n          }\n          view {\n            _id\n          }\n          userId {\n            name\n            avatarImage\n          }\n          chatGptOpt\n          chatGptAnswer\n          answers {\n            _id\n            createdAt\n            body\n            code\n            image\n            userId {\n              name\n              avatarImage\n            }\n            upvote {\n              _id\n            }\n            downvote {\n              _id\n            }\n          }\n        }\n      }\n      ... on QuestionFailure {\n        message\n        args\n      }\n    }\n  }\n`;\n\nexport const UpvoteQuestion = gql`\n  mutation UpvoteQuestion(\n    $upvoteQuestionQuestionId2: ID!\n    $upvoteQuestionUserId2: ID!\n  ) {\n    upvoteQuestion(\n      questionId: $upvoteQuestionQuestionId2\n      userId: $upvoteQuestionUserId2\n    )\n  }\n`;\n\nexport const DownvoteQuestion = gql`\n  mutation DownvoteQuestion($questionId: ID!, $userId: ID!) {\n    downvoteQuestion(questionId: $questionId, userId: $userId)\n  }\n`;\n\nexport const isUpVote = gql`\n  mutation Isupvote($isupvoteQuestionId2: ID!, $isupvoteUserId2: ID!) {\n    isupvote(questionId: $isupvoteQuestionId2, userId: $isupvoteUserId2)\n  }\n`;\n\nexport const isDownVote = gql`\n  mutation Isdownvote($isdownvoteQuestionId2: ID!, $isdownvoteUserId2: ID!) {\n    isdownvote(questionId: $isdownvoteQuestionId2, userId: $isdownvoteUserId2)\n  }\n`;\n\nexport const bookmarkQuestion = gql`\n  mutation UpdateBookmarkedQuestion(\n    $updateBookmarkedQuestionQuestionId2: ID!\n    $updateBookmarkedQuestionUserId2: ID!\n  ) {\n    updateBookmarkedQuestion(\n      questionId: $updateBookmarkedQuestionQuestionId2\n      userId: $updateBookmarkedQuestionUserId2\n    )\n  }\n`;\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,OAAO,MAAMC,eAAe,GAAGD,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAGF,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMG,mBAAmB,GAAGH,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMI,cAAc,GAAGJ,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMK,gBAAgB,GAAGL,GAAI;AACpC;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMM,QAAQ,GAAGN,GAAI;AAC5B;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMO,UAAU,GAAGP,GAAI;AAC9B;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMQ,gBAAgB,GAAGR,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}